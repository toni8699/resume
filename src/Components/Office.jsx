/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/chair/scene.gltf --transform
Files: public/chair/scene.gltf [11.36KB] > /Users/tony/Desktop/resume/scene-transformed.glb [1.88MB] (-16421%)
Author: eucocker (https://sketchfab.com/eucocker)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/chair-c5f49f97856c461a8192fb950ce23540
Title: Chair
*/

import React, {useEffect, useRef} from 'react'
import {useGLTF} from '@react-three/drei'
import {useFrame, useThree} from "@react-three/fiber";

// eslint-disable-next-line react/prop-types
const Office = ({isRotating, setIsRotating,...props}) => {
    const OfficeRef = useRef();
    const {viewport,gl}=useThree();

    const lastX = useRef(0);
    const lastY = useRef(0);
    const rotationSpeed = useRef({rotation:{x:0,y:0}});
    const dampingFactor=0.5;
    const handleMouseDown=(e)=>{
        e.stopPropagation();
        e.preventDefault();
        console.log('handleMouseDown');
        setIsRotating(true);
        lastX.current = e.touches ? e.touches[0].clientX : e.clientX;
        lastY.current = e.touches ? e.touches[0].clientY : e.clientY;
        // console.log('cursor x',lastX.current);
        // console.log('cursor y',lastY.current);
    }
    const handleMouseUp=(e)=>{
        e.stopPropagation();
        e.preventDefault();
        console.log('mouse up');
        setIsRotating(false);
    }
    const handleMouseMove=(e)=>{
        e.stopPropagation();
        e.preventDefault();
        console.log('mouse move');
        if (isRotating){
            console.log('isRotating');
            const clientX = e.touches ? e.touches[0].clientX : e.clientX;
            const deltaX = (clientX - lastX.current)/viewport.width;
            const clientY = e.touches ? e.touches[0].clientY : e.clientY;
            const deltaY = (clientY - lastY.current)/viewport.height;
            //Y
            rotationSpeed.current.rotation.y+= Math.PI*deltaX*0.01;
            //X
            rotationSpeed.current.rotation.x+= Math.PI*deltaY*0.0004;
            // console.log('rotation y',rotationSpeed.current.rotation.x);
            lastX.current = clientX;
            // console.log('last x',lastX.current);
        }
    }
    useFrame (()=>{
        if (isRotating){
            OfficeRef.current.rotation.y+=rotationSpeed.current.rotation.y;
            rotationSpeed.current.rotation.y*=dampingFactor;

            OfficeRef.current.rotation.x+=rotationSpeed.current.rotation.x;
            rotationSpeed.current.rotation.x*=dampingFactor;
        }
    })

    useEffect(()=>{
        const canvas = gl.domElement;
        canvas.addEventListener('mousedown',handleMouseDown);
        canvas.addEventListener('mousemove',handleMouseMove);
        canvas.addEventListener('mouseup',handleMouseUp);
        return () => {
            canvas.removeEventListener('mousedown',handleMouseDown);
            canvas.removeEventListener('mousemove',handleMouseMove);
            canvas.removeEventListener('mouseup',handleMouseUp);
        }
    })
    useEffect(() => {
        const canvas = gl.domElement;
        canvas.addEventListener('mousedown', handleMouseDown);
        canvas.addEventListener('mousemove', handleMouseMove);
        canvas.addEventListener('mouseup', handleMouseUp);
        window.addEventListener('keydown', handleKeyDown);
        window.addEventListener('keyup', handleKeyUp);
        return () => {
            canvas.removeEventListener('mousedown', handleMouseDown);
            canvas.removeEventListener('mousemove', handleMouseMove);
            canvas.removeEventListener('mouseup', handleMouseUp);
            window.removeEventListener('keydown', handleKeyDown);
            window.removeEventListener('keyup', handleKeyUp);
        }
    }, [])

    const handleKeyDown = (e) => {
        if (e.key === "ArrowLeft") {
            setIsRotating(true);
            rotationSpeed.current.rotation.y += 0.02;
        }
        if (e.key === "ArrowRight") {
            setIsRotating(true);
            rotationSpeed.current.rotation.y -= 0.02;
        }
        if (e.key === "ArrowUp") {
            setIsRotating(true);
            rotationSpeed.current.rotation.x -= 0.02;
        }
        if (e.key === "ArrowDown") {
            setIsRotating(true);
            rotationSpeed.current.rotation.x += 0.02;
        }
    }

    const handleKeyUp = (e) => {
        if (e.key === "ArrowLeft" || e.key === "ArrowRight" || e.key === "ArrowUp" || e.key === "ArrowDown") {
            setIsRotating(false);
        }
    }



    const { nodes, materials } = useGLTF('/late_night_office/scene.gltf')
    return (
        <group  ref={OfficeRef}{...props} >
            <group scale={0.01}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Room_ROOM_Mat_0.geometry}
                    material={materials.ROOM_Mat}
                    position={[-19.137, 168.453, -33.842]}
                    rotation={[-Math.PI / 2, 0, 0]}
                    scale={100}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Window_WINDOW_Mat_0.geometry}
                    material={materials.WINDOW_Mat}
                    position={[-19.521, 166.582, -28.049]}
                    rotation={[-Math.PI / 2, 0, 0]}
                    scale={100}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Boxes_BOXES_Mat_0.geometry}
                    material={materials.BOXES_Mat}
                    position={[9.951, 142.012, 2.406]}
                    rotation={[-Math.PI / 2, 0, 0]}
                    scale={100}
                />
            </group>
        </group>
    )
}

useGLTF.preload('/late_night_office/scene.gltf')
export default Office